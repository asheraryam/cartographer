[gd_resource type="VisualShader" load_steps=5 format=2]

[sub_resource type="VisualShaderNodeInput" id=31]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeTexture" id=32]
source = 1

[sub_resource type="VisualShaderNodeVectorOp" id=34]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.002, 0.002, 0 ) ]
operator = 4

[sub_resource type="VisualShaderNodeVectorOp" id=35]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.003, 0.003, 0 ) ]
operator = 1

[resource]
code = "shader_type canvas_item;



void vertex() {
// Output:0

}

void fragment() {
// Input:2
	vec3 n_out2p0 = vec3(SCREEN_UV, 0.0);

// VectorOp:6
	vec3 n_in6p1 = vec3(0.00200, 0.00200, 0.00000);
	vec3 n_out6p0 = mod(n_out2p0, n_in6p1);

// VectorOp:7
	vec3 n_out7p0 = n_out2p0 - n_out6p0;

// Texture:5
	vec3 n_out5p0;
	float n_out5p1;
	{
		vec4 _tex_read = textureLod(SCREEN_TEXTURE, n_out7p0.xy, 0.0);
		n_out5p0 = _tex_read.rgb;
		n_out5p1 = _tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out5p0;
	COLOR.a = n_out5p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -675.006, -60 )
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource( 31 )
nodes/fragment/2/position = Vector2( -540, 240 )
nodes/fragment/5/node = SubResource( 32 )
nodes/fragment/5/position = Vector2( 100, 260 )
nodes/fragment/6/node = SubResource( 34 )
nodes/fragment/6/position = Vector2( -200, 200 )
nodes/fragment/7/node = SubResource( 35 )
nodes/fragment/7/position = Vector2( -200, 420 )
nodes/fragment/connections = PoolIntArray( 6, 0, 7, 1, 2, 0, 6, 0, 5, 0, 0, 0, 2, 0, 7, 0, 5, 1, 0, 1, 7, 0, 5, 0 )
