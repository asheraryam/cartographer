[gd_scene load_steps=6 format=2]

[ext_resource path="res://clipmap.obj" type="ArrayMesh" id=1]
[ext_resource path="res://uv.png" type="Texture" id=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
//render_mode skip_vertex_transform;

const vec3 size = vec3(256, 256, 256);
uniform sampler2D texture : hint_albedo;
varying float clipped;

void vertex() {
	vec3 cam = CAMERA_MATRIX[3].xyz;
	vec3 off = cam;
//	vec3 off = vec3(70, 0, 0);
//	off *= fract(TIME / 4.0);
	off = clamp(off, size / 2.0 * -1.0, size / 2.0);
	off = floor(off / 16.0) * 16.0;
	
	VERTEX *= 2.0;
	vec2 uv = ((VERTEX.xz + off.xz) / 256.0) + 0.5;
	off.y = texture(texture, uv).r * 20.0;
	UV = uv;
	VERTEX += off;
	clipped = abs(VERTEX.x) > size.x / 2.0 || abs(VERTEX.z) > size.z / 2.0 ? 1.0 : 0.0;
}

void fragment() {
	if (clipped > 0.0) {
		discard;
	}
	ALBEDO = texture(texture, UV).rgb;
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/texture = ExtResource( 2 )

[sub_resource type="CubeMesh" id=3]
size = Vector3( 2, 2, 256 )

[node name="Spatial" type="Spatial"]

[node name="MeshInstance" type="MeshInstance" parent="."]
material_override = SubResource( 2 )
mesh = ExtResource( 1 )
material/0 = null

[node name="Camera" type="Camera" parent="."]
transform = Transform( 1, 0, 0, 0, 0.707107, 0.707107, 0, -0.707107, 0.707107, 0, 73, 148 )
far = 1000.0

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( 1, 0, 0, 0, 0.707107, 0.707107, 0, -0.707107, 0.707107, 0, 122, 124 )

[node name="CSGMesh" type="CSGMesh" parent="."]
mesh = SubResource( 3 )
