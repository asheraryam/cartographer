[gd_resource type="VisualShader" load_steps=20 format=2]

[ext_resource path="res://addons/cartographer/carto_shader_node.gd" type="Script" id=1]
[ext_resource path="res://addons/cartographer/rect_green.png" type="Texture" id=2]

[sub_resource type="VisualShaderNodeScalarConstant" id=1]

[sub_resource type="VisualShaderNodeCustom" id=2]
output_port_for_preview = 0
script = ExtResource( 1 )

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture" id=4]
texture = ExtResource( 2 )

[sub_resource type="VisualShaderNodeVec3Uniform" id=5]
uniform_name = "brush_tip"

[sub_resource type="VisualShaderNodeVectorLen" id=6]

[sub_resource type="VisualShaderNodeVectorOp" id=7]
operator = 1

[sub_resource type="VisualShaderNodeInput" id=8]
input_name = "uv"

[sub_resource type="VisualShaderNodeCompare" id=9]
default_input_values = [ 0, 0.0, 1, 20.0, 2, 1e-05 ]
function = 4

[sub_resource type="VisualShaderNodeColorConstant" id=10]
constant = Color( 1, 0, 0, 1 )

[sub_resource type="VisualShaderNodeVectorOp" id=11]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeColorOp" id=12]
operator = 1

[sub_resource type="VisualShaderNodeVec3Uniform" id=13]
uniform_name = "area"

[sub_resource type="VisualShaderNodeVectorOp" id=14]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=15]
uniform_name = "brush_size"

[sub_resource type="VisualShaderNodeInput" id=16]
input_name = "color"

[sub_resource type="VisualShaderNodeTextureUniform" id=17]
uniform_name = "height_map"

[resource]
code = "shader_type spatial;
uniform vec3 brush_tip;
uniform vec3 area;
uniform float brush_size;



void vertex() {
// Output:0

}

void fragment() {
// Input:27
	vec3 n_out27p0 = COLOR.rgb;

// VectorUniform:14
	vec3 n_out14p0 = brush_tip;

// VectorUniform:24
	vec3 n_out24p0 = area;

// Input:17
	vec3 n_out17p0 = vec3(UV, 0.0);

// VectorOp:25
	vec3 n_out25p0 = n_out24p0 * n_out17p0;

// VectorOp:16
	vec3 n_out16p0 = n_out14p0 - n_out25p0;

// VectorLen:15
	float n_out15p0 = length(n_out16p0);

// ScalarUniform:26
	float n_out26p0 = brush_size;

// Compare:18
	bool n_out18p0 = n_out15p0<n_out26p0;

// Color:19
	vec3 n_out19p0 = vec3(1.000000, 0.000000, 0.000000);
	float n_out19p1 = 1.000000;

// VectorOp:20
	vec3 n_out20p0 = vec3(n_out18p0 ? 1.0 : 0.0) * n_out19p0;

// ColorOp:21
	vec3 n_out21p0 = abs(n_out27p0 - n_out20p0);

// Output:0
	ALBEDO = n_out21p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -346.5, -226 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -960, 580 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -680, 740 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( -780, 520 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( 0, 60 )
nodes/fragment/14/node = SubResource( 5 )
nodes/fragment/14/position = Vector2( -1000, -300 )
nodes/fragment/15/node = SubResource( 6 )
nodes/fragment/15/position = Vector2( -360, -160 )
nodes/fragment/16/node = SubResource( 7 )
nodes/fragment/16/position = Vector2( -540, -180 )
nodes/fragment/17/node = SubResource( 8 )
nodes/fragment/17/position = Vector2( -1000, -120 )
nodes/fragment/18/node = SubResource( 9 )
nodes/fragment/18/position = Vector2( -320, 20 )
nodes/fragment/19/node = SubResource( 10 )
nodes/fragment/19/position = Vector2( -440, 320 )
nodes/fragment/20/node = SubResource( 11 )
nodes/fragment/20/position = Vector2( -220, 340 )
nodes/fragment/21/node = SubResource( 12 )
nodes/fragment/21/position = Vector2( 63, 355 )
nodes/fragment/24/node = SubResource( 13 )
nodes/fragment/24/position = Vector2( -1000, -200 )
nodes/fragment/25/node = SubResource( 14 )
nodes/fragment/25/position = Vector2( -800, -200 )
nodes/fragment/26/node = SubResource( 15 )
nodes/fragment/26/position = Vector2( -1000, -20 )
nodes/fragment/27/node = SubResource( 16 )
nodes/fragment/27/position = Vector2( -60, -20 )
nodes/fragment/28/node = SubResource( 17 )
nodes/fragment/28/position = Vector2( -1000, 140 )
nodes/fragment/connections = PoolIntArray( 10, 0, 11, 1, 12, 0, 11, 0, 16, 0, 15, 0, 15, 0, 18, 0, 19, 0, 20, 1, 18, 0, 20, 0, 20, 0, 21, 1, 24, 0, 25, 0, 17, 0, 25, 1, 25, 0, 16, 1, 26, 0, 18, 1, 21, 0, 0, 0, 27, 0, 21, 0, 14, 0, 16, 0 )
