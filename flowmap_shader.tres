[gd_resource type="VisualShader" load_steps=12 format=2]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=2]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.5, 0.5, 0 ) ]
operator = 1

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarFunc" id=4]
function = 17

[sub_resource type="VisualShaderNodeScalarOp" id=5]
default_input_values = [ 0, 0.0, 1, 0.1 ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=6]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 0, 0 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=7]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.5, 0.5, 0 ) ]

[sub_resource type="VisualShaderNodeVectorOp" id=8]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 2, -2, 0 ), 1, Vector3( 2, -2, 0 ) ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=9]
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 2

[sub_resource type="VisualShaderNodeTextureUniform" id=10]
output_port_for_preview = 0
uniform_name = "flowmap"
texture_type = 1

[sub_resource type="VisualShaderNodeTextureUniform" id=11]
output_port_for_preview = 0
uniform_name = "texture"
texture_type = 1

[resource]
code = "shader_type spatial;
uniform sampler2D flowmap : hint_albedo;
uniform sampler2D texture : hint_albedo;



void vertex() {
// Output:0

}

void fragment() {
// Input:10
	vec3 n_out10p0 = vec3(UV, 0.0);

// Input:19
	float n_out19p0 = TIME;

// ScalarOp:22
	float n_in22p1 = 0.10000;
	float n_out22p0 = n_out19p0 * n_in22p1;

// ScalarFunc:20
	float n_out20p0 = fract(n_out22p0);

// ScalarOp:26
	float n_in26p1 = 1.00000;
	float n_out26p0 = n_out20p0 * n_in26p1;

// TextureUniform:27
	vec3 n_out27p0;
	float n_out27p1;
	{
		vec4 n_tex_read = texture(flowmap, UV.xy);
		n_out27p0 = n_tex_read.rgb;
		n_out27p1 = n_tex_read.a;
	}

// VectorOp:15
	vec3 n_in15p1 = vec3(0.50000, 0.50000, 0.00000);
	vec3 n_out15p0 = n_out27p0 - n_in15p1;

// VectorOp:25
	vec3 n_in25p1 = vec3(2.00000, -2.00000, 0.00000);
	vec3 n_out25p0 = n_out15p0 * n_in25p1;

// VectorOp:23
	vec3 n_out23p0 = vec3(n_out26p0) * n_out25p0;

// VectorOp:24
	vec3 n_out24p0 = n_out10p0 + n_out23p0;

// TextureUniform:28
	vec3 n_out28p0;
	float n_out28p1;
	{
		vec4 n_tex_read = texture(texture, n_out24p0.xy);
		n_out28p0 = n_tex_read.rgb;
		n_out28p1 = n_tex_read.a;
	}

// Output:0
	ALBEDO = n_out28p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -1039.5, -151 )
nodes/fragment/0/position = Vector2( 300, 0 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -360, 0 )
nodes/fragment/15/node = SubResource( 2 )
nodes/fragment/15/position = Vector2( -760, 340 )
nodes/fragment/19/node = SubResource( 3 )
nodes/fragment/19/position = Vector2( -1200, -200 )
nodes/fragment/20/node = SubResource( 4 )
nodes/fragment/20/position = Vector2( -800, -200 )
nodes/fragment/22/node = SubResource( 5 )
nodes/fragment/22/position = Vector2( -1000, -200 )
nodes/fragment/23/node = SubResource( 6 )
nodes/fragment/23/position = Vector2( -360, 340 )
nodes/fragment/24/node = SubResource( 7 )
nodes/fragment/24/position = Vector2( -160, 340 )
nodes/fragment/25/node = SubResource( 8 )
nodes/fragment/25/position = Vector2( -560, 340 )
nodes/fragment/26/node = SubResource( 9 )
nodes/fragment/26/position = Vector2( -1000, -80 )
nodes/fragment/27/node = SubResource( 10 )
nodes/fragment/27/position = Vector2( -1000, 340 )
nodes/fragment/28/node = SubResource( 11 )
nodes/fragment/28/position = Vector2( 40, 260 )
nodes/fragment/connections = PoolIntArray( 19, 0, 22, 0, 22, 0, 20, 0, 10, 0, 24, 0, 23, 0, 24, 1, 20, 0, 26, 0, 26, 0, 23, 0, 27, 0, 15, 0, 24, 0, 28, 0, 28, 0, 0, 0, 15, 0, 25, 0, 25, 0, 23, 1 )
